
[ 대체 JPA는 왜 쓰는 걸까? ]

현재 관계형 데이터베이스의 단점을 찾아보자

	비즈니스 로직보다 SQL작성에 많은 시간이 소요된다.
	SQL 중심적인 개발의 문제점이 있다.
		- 무한 반복, 지루한 코드 (crud sql, dto..)
		- 패러다임의 불일치 (객체 vs 관계형 데이터베이스)
			1. 상속
			2. 연관관계
			3. 데이터 타입
			4. 데이터 식별방법
	결국 객체 모델이 점점 데이터 모델로 변해갔다.


JPA 장점은 무엇일까
	CRUD SQL 작성할 필요가 없다.
	객체 중심으로 개발할 수 있다.
	데이터 베이스를 조금 더 쉽게 변경할 수 있다.
	생산성과 유지보수가 좋아진다. 버그도 줄었다.


SQL을 직접 다룰 때 발생하는 문제점
	진정한 의미의 계층 분할이 어렵다.
	엔티티를 신뢰할 수 없다.
	SQL에 의존적인 개발을 하게된다.
	반복작업이 많다.


자바 컬랙션에 저장하듯이 사용할 수는 없을까? 고민 결과가 jpa 이다.




ORM :
	Object-relational mapping
	객체는 객체대로 설계
	관계형 데이터베이스는 관계형 데이터베이스대로 설계
	ORM 프레임워크가 중간에서 매핑


JPA : 
	자바 ORM 기술에 대한 API표준 명세
	jpa는 인터페이스 / hibernate는 구현체


JPA를 왜 사용해야하는가
	SQL 중심적인 개발에서 객체 중심으로 개발할 수 있게 도와준다.
	생산성 / 유지보수가 좋아진다.
	패러다임의 불일치를 해결해준다. (객체 측면에서는 정교한 객체 모델링 가능. 데이터베이스는 그것대로 맞게 모델링하면됨)
	성능 (애플리케이션과 데이터베이스 사이에 계층이 하나 더 있으면 최적화 관점에서 시도해 볼 수 있는 것들이 많음)
	데이터 접근 추상화와 벤더 독립성 (데아터베이스 기술에 종속되지않도록 한다 ^ 같은말)
	

ORM은 객체지향과 관계형 데이터베이스라는 두 기둥 위에 있다. 때문에 어렵고 두 기둥 모두 잘 알아아한다.


성능 최적화를 위한 동작
	1차 캐시와 동일성 보장
	TBD


앤티티 매니저의 생성 과정
	Persistence가 설정정보 조회 (persistence.xml)
	EntityManegerFactory 생성
	EntityManager 생성
	종료


JPQL과 SQL의 차이
	JPQL은 엔티티 객체를 대상으로 쿼리한다. (필드와 클래스 대상)
	SQL은 데이터베이스 테이블을 대상으로 쿼리한다.


	


